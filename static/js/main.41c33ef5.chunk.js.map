{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","props","l","map","v","author","num_comments","But","htmlFor","id","value","search","type","onChange","event","some","target","App","React","useState","localStorage","getItem","searchTerm","setSearchTrem","count","setCount","useEffect","setItem","searchMethod","title","url","points","objectID","filter","x","toLowerCase","includes","console","log","length","className","src","logo","alt","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+EAAAA,EAAOC,QAAU,IAA0B,kC,sLCY3C,IACMC,EAAO,SAAAC,GAAK,OAAIA,EAAMC,EAAEC,KAAI,SAAAC,GAAC,OACjC,6BACE,2BAAIA,EAAEC,OAAN,IAAgBD,EAAEE,mBA6EtB,IAAMC,EAAM,SAAAN,GAQV,OACE,6BACE,2BAAOO,QAAQ,UAAf,YACA,2BAAOC,GAAG,SAASC,MAAOT,EAAMU,OAAQC,KAAK,OAAOC,SATpC,SAAAC,GAClBb,EAAMc,KAAKD,EAAME,OAAON,YAcbO,EAzFf,WAAgB,IAAD,EAEsBC,IAAMC,SAAUC,aAAaC,QAAQ,WAAa,IAFxE,mBAENC,EAFM,KAEKC,EAFL,OAGYL,IAAMC,SAAS,GAH3B,mBAGNK,EAHM,KAGAC,EAHA,KAgBbP,IAAMQ,WAAU,kBAAMN,aAAaO,QAAQ,SAAUL,KAAY,CAACA,IAGlE,IAmBMM,EAnBO,CACX,CACEC,MAAO,QACPC,IAAK,uBACLzB,OAAQ,eACRC,aAAc,EACdyB,OAAQ,EACRC,SAAU,GAEZ,CACEH,MAAO,QACPC,IAAK,wBACLzB,OAAQ,4BACRC,aAAc,EACdyB,OAAQ,EACRC,SAAU,IAIYC,QAAO,SAAAC,GAAC,OAAIA,EAAEL,MAAMM,cAAcC,SAASd,EAAWa,kBAEhFE,QAAQC,IAAIV,GAEZ,IAAIM,EAAI,GASR,OANEA,EADqB,IAApBZ,EAAWiB,OACR,gBAGA,GAIJ,yBAAKC,UAAU,cACb,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,QAC7C,mDA9DY,UANV,kDAsEE,kBAAC,EAAD,CAAMzC,EAAG0B,IACT,2BAAIJ,GACN,6BACA,4BAAQoB,QAnDW,WACnBnB,EAASD,EAAQ,KAkDjB,MACA,4BAAQoB,QAvDW,WACnBnB,EAASD,EAAQ,KAsDjB,OAEE,kBAAC,EAAD,CAAKb,OAAQW,EAAYP,KAAMQ,IACjC,2BACDW,EADC,IACE,gCAASZ,MCxEKuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAE1BJ,IAASC,OAAO,kBAAC,EAAD,MAAOE,SAASC,eAAe,SDuHzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.41c33ef5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction Sa(){\n  return(\n    <p>Hello it's sameer!!</p>\n  );\n}\n\n\n\nconst title = \"sameer\";\nconst List = props => props.l.map(v => (\n  <div>\n    <p>{v.author } {v.num_comments}</p>\n  </div>\n  )\n);\n\nfunction App() { \n\n  const [searchTerm,setSearchTrem] = React.useState( localStorage.getItem('search') || \"\");\n  const [count,setCount] = React.useState(0);\n\n  var handleIncrease = () => {\n    setCount(count + 1);\n  }\n  var handleDecrease = () => {\n    setCount(count - 1);\n  }\n\n  const handleEvent = event =>{\n    setSearchTrem(event.target.value);\n  }\n\n  React.useEffect(() => localStorage.setItem('search', searchTerm),[searchTerm]);\n  \n\n  const list = [\n    {\n      title: 'React',\n      url: 'https://reactjs.org/',\n      author: 'Jordan Walke',\n      num_comments: 3,\n      points: 4,\n      objectID: 0,\n    },\n    {\n      title: 'Redux',\n      url: 'https://redux.js.org/',\n      author: 'Dan Abramov, Andrew Clark',\n      num_comments: 2,\n      points: 5,\n      objectID: 1,\n    },\n  ];\n  \n  const searchMethod = list.filter(x => x.title.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  console.log(searchMethod)\n\n  var x = \"\";\n\n  if(searchTerm.length!==0){\n    x = \"searching for\";\n  }\n  else{\n    x = \"\";\n  }\n\n  return (\n    <div className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"sam\"></img>\n  <h2 > Hello react world. {title}</h2>\n      {Sa()}  \n      <List l={searchMethod}/>\n      <p>{count}</p>\n    <div>  \n    <button onClick={handleDecrease}>-1</button>\n    <button onClick={handleIncrease} >+1</button>\n    </div>\n      <But search={searchTerm} some={setSearchTrem}></But>\n    <p>\n  {x} <strong>{searchTerm}</strong>\n    </p>\n    \n    </div>\n    \n  );\n  \n}\nconst But = props =>{\n\n  const handleEvent = event =>{\n    props.some(event.target.value);\n  }\n\n \n\n  return (\n    <div>\n      <label htmlFor=\"search\" >Search: </label>\n      <input id=\"search\" value={props.search} type=\"text\" onChange={handleEvent} />\n    </div>\n    );\n  \n  }\n\nexport default App;\n\n\n/*\nconst List = ({ list }) =>\n list.map(item => <Item key={item.objectID} item={item} />);\nconst Item = ({ item }) => (\n <div>\n   <span>\n     <a href={item.url}>{item.title}</a>\n   </span>\n   <span>{item.author}</span>\n   <span>{item.num_comments}</span>\n   <span>{item.points}</span>\n </div>\n);\n\n//some useful snippet\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nReactDOM.render(<App/>,document.getElementById('joot'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}